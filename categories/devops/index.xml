<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devops on Yet another one DevOps blog</title>
    <link>//verydevops.com/categories/devops/</link>
    <description>Recent content in devops on Yet another one DevOps blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Aug 2019 22:01:00 +0700</lastBuildDate>
    
	<atom:link href="//verydevops.com/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Terraform &gt;= 0.12.6 map resources import</title>
      <link>//verydevops.com/blog/2019-08-08-terraform-0.12.6-map-resources-import/</link>
      <pubDate>Thu, 08 Aug 2019 22:01:00 +0700</pubDate>
      
      <guid>//verydevops.com/blog/2019-08-08-terraform-0.12.6-map-resources-import/</guid>
      <description>Intro In terraform 0.12.6 developers added a nice feature - Multiple Resource Instances Defined By a Map
So now we can create multiple resources and then safely delete one in the middle of map (that was a bit of a pain with lists).
But how to import new map resources? I&amp;rsquo;ll show on example of import with hypotetical DNS module for AWS Route53 record:
terraform import module.my_domain_com_dns.aws_route53_record.soa[\&amp;quot;@\&amp;quot;] DOMAINZONEID_mydomain.com_SOA  The most non-obvious part is escaping, so if you map key is @ you will need to escape it: \&amp;quot;@\&amp;quot;</description>
    </item>
    
    <item>
      <title>Cloudflare&#39;s terraform provider authentication</title>
      <link>//verydevops.com/blog/2019-07-08-cloudflares-terraform-provider-authentication/</link>
      <pubDate>Mon, 08 Jul 2019 14:29:00 +0700</pubDate>
      
      <guid>//verydevops.com/blog/2019-07-08-cloudflares-terraform-provider-authentication/</guid>
      <description>This is a guide how to configure authentication for cloudflare&amp;rsquo;s terraform provider.
One of my colleagues mentioned that it&amp;rsquo;s not exactly clear how to do that.
This manual is describing experience with cloudflare&amp;rsquo;s enterprise account, for other types of cloudflare&amp;rsquo;s accounts your mileage may vary.
Add cloudflare provider to your terraform state Just put a file providers.tf to your terraform state folder:
provider &amp;quot;cloudflare&amp;quot; { version = &amp;quot;~&amp;gt; 1.15&amp;quot; }  Version is optional - but I usually add it to avoid unexpected surprises.</description>
    </item>
    
    <item>
      <title>Terraform 0.11 and 0.12 side-by-side</title>
      <link>//verydevops.com/blog/2019-06-30-terraform-0.11-and-0.12-side-by-side/</link>
      <pubDate>Sun, 30 Jun 2019 11:03:00 +0700</pubDate>
      
      <guid>//verydevops.com/blog/2019-06-30-terraform-0.11-and-0.12-side-by-side/</guid>
      <description>This is a guide how to install:
 terraform 0.11 and 0.12 terragrunt 0.18 and 0.19  side by side on MacOS X.
Intro I use terraform and terragrunt to automate our AWS IT infrastructure.
Recently Hashicorp released major terraform upgrade.
The main point - upgrade from HCL 1 to HCL 2 (HCL is a language that terraform uses to describe IT infra setup.
There are a lot of useful features in HCL 2 so effort spent on upgrade from terraform 0.</description>
    </item>
    
    <item>
      <title>Chef shortcuts</title>
      <link>//verydevops.com/blog/2014-11-21-chef-shortcuts/</link>
      <pubDate>Fri, 21 Nov 2014 13:16:00 +0700</pubDate>
      
      <guid>//verydevops.com/blog/2014-11-21-chef-shortcuts/</guid>
      <description>Add a recipe to the end of run list on certain environment Test run, not actually add a recipe:
knife exec -E &#39;nodes.transform (&amp;quot;chef_environment:beta&amp;quot;) {|n| puts n.run_list &amp;lt;&amp;lt; &amp;quot;recipe[logentries_ng]&amp;quot; }&#39;  Add a recipe for real:
knife exec -E &#39;nodes.transform (&amp;quot;chef_environment:beta&amp;quot;) {|n| puts n.run_list &amp;lt;&amp;lt; &amp;quot;recipe[logentries_ng]&amp;quot;; n.save }&#39;  Add a recipe to the beginning of run list on certain environment Test run, not actually add a recipe:
knife exec -E &#39;nodes.</description>
    </item>
    
    <item>
      <title>Accessing chef attributes in serverspec tests</title>
      <link>//verydevops.com/blog/2014-05-12-accessing-chef-attributes-in-serverspec-tests/</link>
      <pubDate>Mon, 12 May 2014 01:45:00 +0700</pubDate>
      
      <guid>//verydevops.com/blog/2014-05-12-accessing-chef-attributes-in-serverspec-tests/</guid>
      <description>I presume that you are familiar with:
 Chef test-kitchen serverspec  When you write serverspec integration tests, it would be great to have access to chef attributes of cookbook that you&amp;rsquo;re testing. There&amp;rsquo;s a fast and simple way to do this.
Introduction cat attributes/default.rb  override[&#39;backup&#39;][&#39;dependencies&#39;] = [[&#39;fog&#39;],[&#39;aws-s3&#39;]]  Let&amp;rsquo;s say we want this attribute in your serverspec tests.
How can we do that?
 Dump chef attributes to JSON file with helper cookbook Load this file from serverspec tests  Dump chef attributes Create fixture cookbook emacs test/fixtures/cookbooks/test-helper/metadata.</description>
    </item>
    
    <item>
      <title>Backup gem and Chef</title>
      <link>//verydevops.com/blog/2014-04-24-backup-gem-and-chef/</link>
      <pubDate>Thu, 24 Apr 2014 12:48:00 +0700</pubDate>
      
      <guid>//verydevops.com/blog/2014-04-24-backup-gem-and-chef/</guid>
      <description>Intro  There&amp;rsquo;s a nice tool for doing fast and easy backup to AWS S3: backup gem There should be done a lot of steps for setup a backup though. So it could be automated with chef. In this article I&amp;rsquo;ll write log of creation backup gem&amp;rsquo;s cookbook. Essentially this cookbook will install backup gem, that will backup /var/www folder to AWS S3 every day in 01:00. It will store last 14 backups.</description>
    </item>
    
  </channel>
</rss>